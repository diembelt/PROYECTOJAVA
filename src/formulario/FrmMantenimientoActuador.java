/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package formulario;

import javax.swing.JOptionPane;
import archivo.*;
import entidad.Actuador;
import general.ValidadorA;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vr
 */
public class FrmMantenimientoActuador extends javax.swing.JFrame {

    /**
     * Creates new form FrmMantenimientoPersona
     */
    public FrmMantenimientoActuador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbTipo = new javax.swing.JComboBox();
        tfDescripcion = new javax.swing.JTextField();
        bConsultar = new javax.swing.JButton();
        spResultado = new javax.swing.JScrollPane();
        tResultado = new javax.swing.JTable();
        bIngresar = new javax.swing.JButton();
        bEditar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TODOS", "ID", "NOMBRE\"", "FABRICANTE\"", "MODELO\"", "UBICACION", "ESTADO", "TIPO", "DESCRIPCION" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        bConsultar.setText("Consultar");
        bConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConsultarActionPerformed(evt);
            }
        });

        tResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "FABRICANTE", "MODELO", "UBICACION", "ESTADO", "TIPO", "DESCRIPCION"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spResultado.setViewportView(tResultado);

        bIngresar.setText("Ingresar");
        bIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bIngresarActionPerformed(evt);
            }
        });

        bEditar.setText("Editar");
        bEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditarActionPerformed(evt);
            }
        });

        bEliminar.setText("Eliminar");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bConsultar)
                        .addContainerGap(327, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(bEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(spResultado)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bConsultar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(spResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bIngresar)
                    .addComponent(bEditar)
                    .addComponent(bEliminar))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bIngresarActionPerformed
        // TODO add your handling code here:
        FrmIngresoPersona frm = new FrmIngresoPersona();
        frm.setVisible(true);
                
    }//GEN-LAST:event_bIngresarActionPerformed

    private boolean formularioConsultaValido(){
        String tipo = cbTipo.getSelectedItem().toString();
        String descripcion = tfDescripcion.getText();
        
        if(!tipo.equals("TODOS") && descripcion.equals("")){
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripción",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(tipo.equals("ID")){
            try{
                Integer.parseInt(descripcion);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar un número",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        
        return true;
    }
    
    public void consultarRegistros(){
                if(formularioConsultaValido()){
            String tipo = cbTipo.getSelectedItem().toString();
            String descripcion = tfDescripcion.getText();
            
            try{
                ArrayList<Actuador> registros = ArchivoA.obtener_registros();
                ArrayList<Actuador> resultado = new ArrayList<Actuador>();
                
                if(tipo.equals("TODOS")){
                    resultado = registros;                
                }else{
                    for(Actuador p:registros) {
                        if(tipo.equals("ID")){
                            if(p.getId().contains(descripcion)){
                                resultado.add(p);
                            }                        
                        }else if(tipo.equals("NOMBRE")){
                            if(p.getNombre().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }
                        }else if(tipo.equals("FABRICANTE")){
                            if(p.getFabricante().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }                    
                        }else if(tipo.equals("MODELO")){
                            if(p.getModelo().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }                    
                        }else if(tipo.equals("UBICACION")){
                            if(p.getUbicacion().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }                    
                        
                        }else if(tipo.equals("ESTADO")){
                            if(p.getEstado()==Integer.parseInt(descripcion)){
                                resultado.add(p);
                            }
                        }else if(tipo.equals("TIPO")){
                            if(p.getTipo().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }                    
                        }else if(tipo.equals("DESCRIPCION")){
                            if(p.getDescripcion().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(p);
                            }                    
                        
                        }                        
                    }                
                }
                
                DefaultTableModel dtm = (DefaultTableModel)tResultado.getModel();
                dtm.setRowCount(0);
                
                for(Actuador p:resultado){
                    Object[] fila = new Object[4];
                    fila[0] = p.getId();
                    fila[1] = p.getNombre();
                    fila[2] = p.getFabricante();
                    fila[3] = p.getModelo();
                    fila[4] = p.getUbicacion();
                    fila[5] = p.getEstado();
                    fila[6] = p.getTipo();
                    fila[7] = p.getDescripcion();
                    
                    dtm.addRow(fila);                
                }
           }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error al consultar los registros",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            }            
        }
    }
    
    
    private void bConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConsultarActionPerformed
        consultarRegistros();
    }//GEN-LAST:event_bConsultarActionPerformed

    private boolean seleccionEdicionValida(){
        int n = tResultado.getSelectedRowCount();
        if(n!=1){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un registro para editar",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    
    }
    
    
    private void bEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditarActionPerformed
        // TODO add your handling code here:
        if(seleccionEdicionValida()){
            int fila = tResultado.getSelectedRow();
            String cedula = tResultado.getValueAt(fila,0).toString();
            ArrayList<Actuador> registros = new ArrayList();
            try{
                registros = ArchivoA.obtener_registros();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Ocurrió un error al consultar los registros",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);    
            }
            
            if(ValidadorA.validarDuplicidad(registros,cedula)){
                FrmEdicionPersona frm = new FrmEdicionPersona(cedula,this);
                frm.setVisible(true);                
            }else{
                JOptionPane.showMessageDialog(this,
                    "El registro seleccionado no existe",
                    "Edición",
                    JOptionPane.ERROR_MESSAGE);                    
            }            
        }
    }//GEN-LAST:event_bEditarActionPerformed

    private boolean seleccionEliminacionValida(){
        
        
        int n = tResultado.getSelectedRowCount();
        if(n==0){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar mínimo un registro para eliminar",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        
        int op = JOptionPane.showConfirmDialog(this, "Está seguro de eliminar los registros seleccionados?","Eliminación",JOptionPane.YES_NO_OPTION);
        if(op==0)
            return true;
        else
            return false;
    }
    
    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        if(seleccionEliminacionValida()){
            int filas[] =tResultado.getSelectedRows();
            for (int i = 0; i < filas.length; i++) {
                int fila = filas[i];
                String cedula = tResultado.getValueAt(fila,0).toString();
                if(!Archivo.eliminar_registro(cedula)){
                    JOptionPane.showMessageDialog(this,
                    "Ocurrió un error en la eliminación",
                    "Eliminación",
                    JOptionPane.ERROR_MESSAGE); 
                    return ;
                }                
            }
            
            JOptionPane.showMessageDialog(this,
                    "Se realizó la eliminación correctamente",
                    "Eliminación",
                    JOptionPane.INFORMATION_MESSAGE);        
            consultarRegistros();
        }
        
        
    }//GEN-LAST:event_bEliminarActionPerformed

    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTipoActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConsultar;
    private javax.swing.JButton bEditar;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bIngresar;
    private javax.swing.JComboBox cbTipo;
    private javax.swing.JScrollPane spResultado;
    private javax.swing.JTable tResultado;
    private javax.swing.JTextField tfDescripcion;
    // End of variables declaration//GEN-END:variables
}
